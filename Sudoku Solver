class Solution {
    public void solve(char[][] board,int row,int col,char[][] grid)
    {
        if(row==9)
        {
            for(int i=0;i<9;i++)
            {
                for(int j=0;j<9;j++)
                {
                    grid[i][j]=board[i][j];
                }
            }
            return;
        }
        else if(board[row][col]!='.'){
        if(col != 8) solve(board,row,col+1,grid);
        else solve(board,row+1,0,grid);
        }
        else
        {
            for(char ch='1';ch<='9';ch++)
            {
                  if(issafe(board,row,col,ch))
                  {
                     board[row][col]=ch;
                     if(col != 8)solve(board,row,col+1,grid);
                     else solve(board,row+1,0,grid);
                     board[row][col]='.';
                  }
            }
        }
    }
    public boolean issafe(char[][] board,int row,int col,int num)
    {
          //for checking row
           for(int i=0;i<9;i++)
           {
                if(board[i][col]==num) return false;
           }
          //for checking the col
          for(int i=0;i<9;i++)
          {
             if(board[row][i]==num) return false;
          }
          //check block
          int i=row/3*3;
          int j=col/3*3;
          for(int k=i;k<i+3;k++)
          {
              for(int s=j;s<j+3;s++)
              {
                  if(board[k][s]==num) return false;
              }
          }
          return true;
    }
    public void solveSudoku(char[][] board) {
        char[][] grid=new char[9][9];
        solve(board,0,0,grid);
        for(int i=0;i<9;i++)
            {
                for(int j=0;j<9;j++)
                {
                    board[i][j]=grid[i][j];
                }
            }
    }
}
